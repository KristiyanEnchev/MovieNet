services:
  # Database
  postgres:
    image: postgres
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGDATA: /postgresql/data
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d MovieNet']
      interval: 10s
      timeout: 5s
      retries: 3

  # PG Admin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    restart: always
    ports:
      - '5050:80'
    volumes:
      - pgadmin_data:/root/.pgadmin
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: master
    command: bash -c "redis-server --appendonly yes --requirepass password"
    ports:
      - '6379:6379'
    volumes:
      - ./Redis/data:/data
    networks:
      - app-network

  redis-slave:
    image: redis:latest
    container_name: slave
    ports:
      - '6380:6379'
    command: redis-server /etc/redis.conf --replicaof master 6379
    depends_on:
      - redis
    volumes:
      - ./Redis/redis.conf:/etc/redis.conf
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=slave
      - REDIS_HOST=master
      - REDIS_PASSWORD=password
      - HTTP_USER=masterauth
      - HTTP_PASSWORD=password
    ports:
      - 8081:8081
    depends_on:
      - redis
    networks:
      - app-network

  api:
    build:
      context: ./Server
      dockerfile: ./API/Host/Dockerfile
    container_name: dotnet-api
    ports:
      - '8080:8080'
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=PROD
      - ConnectionStrings__DefaultConnection=${DB_CONNECTION_STRING}
      - ConnectionStrings__Redis=${REDIS_CONNECTION}
      - Tmdb__ApiKey=${TMDB_API_KEY}
    networks:
      - app-network

  client:
    build:
      context: ./Client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
    container_name: react-client
    ports:
      - '3000:80'
    depends_on:
      - api
    environment:
      - NODE_ENV=PROD
    networks:
      - app-network

networks:
  app-network:
    name: app-network

volumes:
  postgres_data:
  pgadmin_data:
